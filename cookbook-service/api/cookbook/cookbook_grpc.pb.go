//
//Copyright 2024 HeavenZhi. All rights reserved.
//Use of this source code is governed by a MIT style
//license that can be found in the LICENSE file.

// 指定的当前 proto 语法版本，有 proto2 和 proto3 之分，不填默认为 proto2

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: cookbook/cookbook.proto

// 指定 proto 文件的命名空间，一个 proto 文件就是一个 package，用于防止 message 重名
// 同时在 import 其他 proto 文件时，需要使用其内部定义 package 名，通过 package_name.message 来调用其定义的 message

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Cookbook_InsertCookbook_FullMethodName                      = "/pb.Cookbook/InsertCookbook"
	Cookbook_DeleteCookbook_FullMethodName                      = "/pb.Cookbook/DeleteCookbook"
	Cookbook_UpdateCookbook_FullMethodName                      = "/pb.Cookbook/UpdateCookbook"
	Cookbook_GetCookbookBySid_FullMethodName                    = "/pb.Cookbook/GetCookbookBySid"
	Cookbook_FindCookbookListByName_FullMethodName              = "/pb.Cookbook/FindCookbookListByName"
	Cookbook_FindCookbookListByCuisineSid_FullMethodName        = "/pb.Cookbook/FindCookbookListByCuisineSid"
	Cookbook_FindCookbookListByDtSid_FullMethodName             = "/pb.Cookbook/FindCookbookListByDtSid"
	Cookbook_FindCookbookListByGeneralConditions_FullMethodName = "/pb.Cookbook/FindCookbookListByGeneralConditions"
	Cookbook_FindCookbookList_FullMethodName                    = "/pb.Cookbook/FindCookbookList"
)

// CookbookClient is the client API for Cookbook service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CookbookClient interface {
	// 新增菜谱
	InsertCookbook(ctx context.Context, in *CookbookRequest, opts ...grpc.CallOption) (*BooleanResponse, error)
	// 删除菜谱
	DeleteCookbook(ctx context.Context, in *CookbookBySidRequest, opts ...grpc.CallOption) (*BooleanResponse, error)
	// 修改菜谱
	UpdateCookbook(ctx context.Context, in *CookbookRequest, opts ...grpc.CallOption) (*BooleanResponse, error)
	// 根据菜谱的Sid查找菜谱
	GetCookbookBySid(ctx context.Context, in *CookbookBySidRequest, opts ...grpc.CallOption) (*GetCookbookResponse, error)
	// 根据菜谱表的 name 批量获取菜谱列表
	FindCookbookListByName(ctx context.Context, in *CookbookListByNameRequest, opts ...grpc.CallOption) (*FindCookbookListResponse, error)
	// 根据 cuisine 表的 sid 批量获取菜谱列表
	FindCookbookListByCuisineSid(ctx context.Context, in *CookbookListByCuisineSidRequest, opts ...grpc.CallOption) (*FindCookbookListResponse, error)
	// 根据 dishes_type 表的 sid 批量获取菜谱列表
	FindCookbookListByDtSid(ctx context.Context, in *CookbookListByDtSidRequest, opts ...grpc.CallOption) (*FindCookbookListResponse, error)
	// 根据综合条件批量获取菜谱列表的请求体
	FindCookbookListByGeneralConditions(ctx context.Context, in *CookbookListByGeneralConditionsRequest, opts ...grpc.CallOption) (*FindCookbookListResponse, error)
	// 批量获取菜谱列表
	FindCookbookList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FindCookbookListResponse, error)
}

type cookbookClient struct {
	cc grpc.ClientConnInterface
}

func NewCookbookClient(cc grpc.ClientConnInterface) CookbookClient {
	return &cookbookClient{cc}
}

func (c *cookbookClient) InsertCookbook(ctx context.Context, in *CookbookRequest, opts ...grpc.CallOption) (*BooleanResponse, error) {
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, Cookbook_InsertCookbook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cookbookClient) DeleteCookbook(ctx context.Context, in *CookbookBySidRequest, opts ...grpc.CallOption) (*BooleanResponse, error) {
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, Cookbook_DeleteCookbook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cookbookClient) UpdateCookbook(ctx context.Context, in *CookbookRequest, opts ...grpc.CallOption) (*BooleanResponse, error) {
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, Cookbook_UpdateCookbook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cookbookClient) GetCookbookBySid(ctx context.Context, in *CookbookBySidRequest, opts ...grpc.CallOption) (*GetCookbookResponse, error) {
	out := new(GetCookbookResponse)
	err := c.cc.Invoke(ctx, Cookbook_GetCookbookBySid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cookbookClient) FindCookbookListByName(ctx context.Context, in *CookbookListByNameRequest, opts ...grpc.CallOption) (*FindCookbookListResponse, error) {
	out := new(FindCookbookListResponse)
	err := c.cc.Invoke(ctx, Cookbook_FindCookbookListByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cookbookClient) FindCookbookListByCuisineSid(ctx context.Context, in *CookbookListByCuisineSidRequest, opts ...grpc.CallOption) (*FindCookbookListResponse, error) {
	out := new(FindCookbookListResponse)
	err := c.cc.Invoke(ctx, Cookbook_FindCookbookListByCuisineSid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cookbookClient) FindCookbookListByDtSid(ctx context.Context, in *CookbookListByDtSidRequest, opts ...grpc.CallOption) (*FindCookbookListResponse, error) {
	out := new(FindCookbookListResponse)
	err := c.cc.Invoke(ctx, Cookbook_FindCookbookListByDtSid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cookbookClient) FindCookbookListByGeneralConditions(ctx context.Context, in *CookbookListByGeneralConditionsRequest, opts ...grpc.CallOption) (*FindCookbookListResponse, error) {
	out := new(FindCookbookListResponse)
	err := c.cc.Invoke(ctx, Cookbook_FindCookbookListByGeneralConditions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cookbookClient) FindCookbookList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FindCookbookListResponse, error) {
	out := new(FindCookbookListResponse)
	err := c.cc.Invoke(ctx, Cookbook_FindCookbookList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CookbookServer is the server API for Cookbook service.
// All implementations must embed UnimplementedCookbookServer
// for forward compatibility
type CookbookServer interface {
	// 新增菜谱
	InsertCookbook(context.Context, *CookbookRequest) (*BooleanResponse, error)
	// 删除菜谱
	DeleteCookbook(context.Context, *CookbookBySidRequest) (*BooleanResponse, error)
	// 修改菜谱
	UpdateCookbook(context.Context, *CookbookRequest) (*BooleanResponse, error)
	// 根据菜谱的Sid查找菜谱
	GetCookbookBySid(context.Context, *CookbookBySidRequest) (*GetCookbookResponse, error)
	// 根据菜谱表的 name 批量获取菜谱列表
	FindCookbookListByName(context.Context, *CookbookListByNameRequest) (*FindCookbookListResponse, error)
	// 根据 cuisine 表的 sid 批量获取菜谱列表
	FindCookbookListByCuisineSid(context.Context, *CookbookListByCuisineSidRequest) (*FindCookbookListResponse, error)
	// 根据 dishes_type 表的 sid 批量获取菜谱列表
	FindCookbookListByDtSid(context.Context, *CookbookListByDtSidRequest) (*FindCookbookListResponse, error)
	// 根据综合条件批量获取菜谱列表的请求体
	FindCookbookListByGeneralConditions(context.Context, *CookbookListByGeneralConditionsRequest) (*FindCookbookListResponse, error)
	// 批量获取菜谱列表
	FindCookbookList(context.Context, *emptypb.Empty) (*FindCookbookListResponse, error)
	mustEmbedUnimplementedCookbookServer()
}

// UnimplementedCookbookServer must be embedded to have forward compatible implementations.
type UnimplementedCookbookServer struct {
}

func (UnimplementedCookbookServer) InsertCookbook(context.Context, *CookbookRequest) (*BooleanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertCookbook not implemented")
}
func (UnimplementedCookbookServer) DeleteCookbook(context.Context, *CookbookBySidRequest) (*BooleanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCookbook not implemented")
}
func (UnimplementedCookbookServer) UpdateCookbook(context.Context, *CookbookRequest) (*BooleanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCookbook not implemented")
}
func (UnimplementedCookbookServer) GetCookbookBySid(context.Context, *CookbookBySidRequest) (*GetCookbookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCookbookBySid not implemented")
}
func (UnimplementedCookbookServer) FindCookbookListByName(context.Context, *CookbookListByNameRequest) (*FindCookbookListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCookbookListByName not implemented")
}
func (UnimplementedCookbookServer) FindCookbookListByCuisineSid(context.Context, *CookbookListByCuisineSidRequest) (*FindCookbookListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCookbookListByCuisineSid not implemented")
}
func (UnimplementedCookbookServer) FindCookbookListByDtSid(context.Context, *CookbookListByDtSidRequest) (*FindCookbookListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCookbookListByDtSid not implemented")
}
func (UnimplementedCookbookServer) FindCookbookListByGeneralConditions(context.Context, *CookbookListByGeneralConditionsRequest) (*FindCookbookListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCookbookListByGeneralConditions not implemented")
}
func (UnimplementedCookbookServer) FindCookbookList(context.Context, *emptypb.Empty) (*FindCookbookListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCookbookList not implemented")
}
func (UnimplementedCookbookServer) mustEmbedUnimplementedCookbookServer() {}

// UnsafeCookbookServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CookbookServer will
// result in compilation errors.
type UnsafeCookbookServer interface {
	mustEmbedUnimplementedCookbookServer()
}

func RegisterCookbookServer(s grpc.ServiceRegistrar, srv CookbookServer) {
	s.RegisterService(&Cookbook_ServiceDesc, srv)
}

func _Cookbook_InsertCookbook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CookbookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CookbookServer).InsertCookbook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cookbook_InsertCookbook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CookbookServer).InsertCookbook(ctx, req.(*CookbookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cookbook_DeleteCookbook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CookbookBySidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CookbookServer).DeleteCookbook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cookbook_DeleteCookbook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CookbookServer).DeleteCookbook(ctx, req.(*CookbookBySidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cookbook_UpdateCookbook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CookbookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CookbookServer).UpdateCookbook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cookbook_UpdateCookbook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CookbookServer).UpdateCookbook(ctx, req.(*CookbookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cookbook_GetCookbookBySid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CookbookBySidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CookbookServer).GetCookbookBySid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cookbook_GetCookbookBySid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CookbookServer).GetCookbookBySid(ctx, req.(*CookbookBySidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cookbook_FindCookbookListByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CookbookListByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CookbookServer).FindCookbookListByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cookbook_FindCookbookListByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CookbookServer).FindCookbookListByName(ctx, req.(*CookbookListByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cookbook_FindCookbookListByCuisineSid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CookbookListByCuisineSidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CookbookServer).FindCookbookListByCuisineSid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cookbook_FindCookbookListByCuisineSid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CookbookServer).FindCookbookListByCuisineSid(ctx, req.(*CookbookListByCuisineSidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cookbook_FindCookbookListByDtSid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CookbookListByDtSidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CookbookServer).FindCookbookListByDtSid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cookbook_FindCookbookListByDtSid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CookbookServer).FindCookbookListByDtSid(ctx, req.(*CookbookListByDtSidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cookbook_FindCookbookListByGeneralConditions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CookbookListByGeneralConditionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CookbookServer).FindCookbookListByGeneralConditions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cookbook_FindCookbookListByGeneralConditions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CookbookServer).FindCookbookListByGeneralConditions(ctx, req.(*CookbookListByGeneralConditionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cookbook_FindCookbookList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CookbookServer).FindCookbookList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cookbook_FindCookbookList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CookbookServer).FindCookbookList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Cookbook_ServiceDesc is the grpc.ServiceDesc for Cookbook service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cookbook_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Cookbook",
	HandlerType: (*CookbookServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertCookbook",
			Handler:    _Cookbook_InsertCookbook_Handler,
		},
		{
			MethodName: "DeleteCookbook",
			Handler:    _Cookbook_DeleteCookbook_Handler,
		},
		{
			MethodName: "UpdateCookbook",
			Handler:    _Cookbook_UpdateCookbook_Handler,
		},
		{
			MethodName: "GetCookbookBySid",
			Handler:    _Cookbook_GetCookbookBySid_Handler,
		},
		{
			MethodName: "FindCookbookListByName",
			Handler:    _Cookbook_FindCookbookListByName_Handler,
		},
		{
			MethodName: "FindCookbookListByCuisineSid",
			Handler:    _Cookbook_FindCookbookListByCuisineSid_Handler,
		},
		{
			MethodName: "FindCookbookListByDtSid",
			Handler:    _Cookbook_FindCookbookListByDtSid_Handler,
		},
		{
			MethodName: "FindCookbookListByGeneralConditions",
			Handler:    _Cookbook_FindCookbookListByGeneralConditions_Handler,
		},
		{
			MethodName: "FindCookbookList",
			Handler:    _Cookbook_FindCookbookList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cookbook/cookbook.proto",
}
