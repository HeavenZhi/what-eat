//
//Copyright 2024 HeavenZhi. All rights reserved.
//Use of this source code is governed by a MIT style
//license that can be found in the LICENSE file.

// 指定的当前 proto 语法版本，有 proto2 和 proto3 之分，不填默认为 proto2

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.2
// source: cookbook/cookbook.proto

// 指定 proto 文件的命名空间，一个 proto 文件就是一个 package，用于防止 message 重名
// 同时在 import 其他 proto 文件时，需要使用其内部定义 package 名，通过 package_name.message 来调用其定义的 message

package pb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 菜谱的请求体
type CookbookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 菜谱表唯一键
	Sid string `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	// 菜名
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 菜谱图片地址
	ImageAddress string `protobuf:"bytes,3,opt,name=image_address,json=imageAddress,proto3" json:"image_address,omitempty"`
	// 是否为荤菜
	IsMeat bool `protobuf:"varint,4,opt,name=is_meat,json=isMeat,proto3" json:"is_meat,omitempty"`
	// 该菜品特色
	Feature string `protobuf:"bytes,5,opt,name=feature,proto3" json:"feature,omitempty"`
	// 具体烹饪方法总览
	CookingMethods string `protobuf:"bytes,6,opt,name=cooking_methods,json=cookingMethods,proto3" json:"cooking_methods,omitempty"`
	// cuisine 表的 sid 外键
	CuisineSid string `protobuf:"bytes,7,opt,name=cuisine_sid,json=cuisineSid,proto3" json:"cuisine_sid,omitempty"`
	// dishes_type 表的 sid 外键
	DtSid string `protobuf:"bytes,8,opt,name=dt_sid,json=dtSid,proto3" json:"dt_sid,omitempty"`
	// 食材的列表
	CookbookIngredientList []*CookbookRequest_CookbookIngredientRequest `protobuf:"bytes,9,rep,name=cookbook_ingredient_list,json=cookbookIngredientList,proto3" json:"cookbook_ingredient_list,omitempty"`
	// 菜谱制作步骤的列表
	CookbookCookingList []*CookbookRequest_CookbookCookingRequest `protobuf:"bytes,10,rep,name=cookbook_cooking_list,json=cookbookCookingList,proto3" json:"cookbook_cooking_list,omitempty"`
}

func (x *CookbookRequest) Reset() {
	*x = CookbookRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cookbook_cookbook_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CookbookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CookbookRequest) ProtoMessage() {}

func (x *CookbookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cookbook_cookbook_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CookbookRequest.ProtoReflect.Descriptor instead.
func (*CookbookRequest) Descriptor() ([]byte, []int) {
	return file_cookbook_cookbook_proto_rawDescGZIP(), []int{0}
}

func (x *CookbookRequest) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *CookbookRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CookbookRequest) GetImageAddress() string {
	if x != nil {
		return x.ImageAddress
	}
	return ""
}

func (x *CookbookRequest) GetIsMeat() bool {
	if x != nil {
		return x.IsMeat
	}
	return false
}

func (x *CookbookRequest) GetFeature() string {
	if x != nil {
		return x.Feature
	}
	return ""
}

func (x *CookbookRequest) GetCookingMethods() string {
	if x != nil {
		return x.CookingMethods
	}
	return ""
}

func (x *CookbookRequest) GetCuisineSid() string {
	if x != nil {
		return x.CuisineSid
	}
	return ""
}

func (x *CookbookRequest) GetDtSid() string {
	if x != nil {
		return x.DtSid
	}
	return ""
}

func (x *CookbookRequest) GetCookbookIngredientList() []*CookbookRequest_CookbookIngredientRequest {
	if x != nil {
		return x.CookbookIngredientList
	}
	return nil
}

func (x *CookbookRequest) GetCookbookCookingList() []*CookbookRequest_CookbookCookingRequest {
	if x != nil {
		return x.CookbookCookingList
	}
	return nil
}

// 根据菜谱的Sid查找菜谱的请求体
type CookbookBySidRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 菜谱表唯一键
	Sid string `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
}

func (x *CookbookBySidRequest) Reset() {
	*x = CookbookBySidRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cookbook_cookbook_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CookbookBySidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CookbookBySidRequest) ProtoMessage() {}

func (x *CookbookBySidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cookbook_cookbook_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CookbookBySidRequest.ProtoReflect.Descriptor instead.
func (*CookbookBySidRequest) Descriptor() ([]byte, []int) {
	return file_cookbook_cookbook_proto_rawDescGZIP(), []int{1}
}

func (x *CookbookBySidRequest) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

// 布尔响应体
type BooleanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Boolean bool `protobuf:"varint,1,opt,name=boolean,proto3" json:"boolean,omitempty"`
}

func (x *BooleanResponse) Reset() {
	*x = BooleanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cookbook_cookbook_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BooleanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BooleanResponse) ProtoMessage() {}

func (x *BooleanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cookbook_cookbook_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BooleanResponse.ProtoReflect.Descriptor instead.
func (*BooleanResponse) Descriptor() ([]byte, []int) {
	return file_cookbook_cookbook_proto_rawDescGZIP(), []int{2}
}

func (x *BooleanResponse) GetBoolean() bool {
	if x != nil {
		return x.Boolean
	}
	return false
}

// 获取菜谱的响应体
type GetCookbookResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 菜谱表唯一键
	Sid string `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	// 菜名
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 菜谱图片地址
	ImageAddress string `protobuf:"bytes,3,opt,name=image_address,json=imageAddress,proto3" json:"image_address,omitempty"`
	// 是否为荤菜
	IsMeat bool `protobuf:"varint,4,opt,name=is_meat,json=isMeat,proto3" json:"is_meat,omitempty"`
	// 该菜品特色
	Feature string `protobuf:"bytes,5,opt,name=feature,proto3" json:"feature,omitempty"`
	// 具体烹饪方法总览
	CookingMethods string `protobuf:"bytes,6,opt,name=cooking_methods,json=cookingMethods,proto3" json:"cooking_methods,omitempty"`
	// 食材处理过程分值,加分越多处理越麻烦,加分越少处理越简单
	ProcessDifficulty float32 `protobuf:"fixed32,7,opt,name=process_difficulty,json=processDifficulty,proto3" json:"process_difficulty,omitempty"`
	// 食材的清淡程度分值,加分越多越重口味,加分越少越清淡
	Health float32 `protobuf:"fixed32,8,opt,name=health,proto3" json:"health,omitempty"`
	// cuisine 表的 sid 外键
	CuisineSid string `protobuf:"bytes,9,opt,name=cuisine_sid,json=cuisineSid,proto3" json:"cuisine_sid,omitempty"`
	// cuisine 表的 name
	CuisineName string `protobuf:"bytes,10,opt,name=cuisine_name,json=cuisineName,proto3" json:"cuisine_name,omitempty"`
	// dishes_type 表的 sid 外键
	DtSid string `protobuf:"bytes,11,opt,name=dt_sid,json=dtSid,proto3" json:"dt_sid,omitempty"`
	// dishes_type 表的 name
	DtName string `protobuf:"bytes,12,opt,name=dt_name,json=dtName,proto3" json:"dt_name,omitempty"`
	// User模块的user表的sid外键
	UserSid string `protobuf:"bytes,13,opt,name=user_sid,json=userSid,proto3" json:"user_sid,omitempty"`
	// User模块的user表的name
	UserName string `protobuf:"bytes,14,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// 食材的列表
	CookbookIngredientList []*GetCookbookResponse_GetCookbookIngredientResponse `protobuf:"bytes,15,rep,name=cookbook_ingredient_list,json=cookbookIngredientList,proto3" json:"cookbook_ingredient_list,omitempty"`
	// 菜谱制作步骤的列表
	CookbookCookingList []*GetCookbookResponse_GetCookbookCookingResponse `protobuf:"bytes,16,rep,name=cookbook_cooking_list,json=cookbookCookingList,proto3" json:"cookbook_cooking_list,omitempty"`
}

func (x *GetCookbookResponse) Reset() {
	*x = GetCookbookResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cookbook_cookbook_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCookbookResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCookbookResponse) ProtoMessage() {}

func (x *GetCookbookResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cookbook_cookbook_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCookbookResponse.ProtoReflect.Descriptor instead.
func (*GetCookbookResponse) Descriptor() ([]byte, []int) {
	return file_cookbook_cookbook_proto_rawDescGZIP(), []int{3}
}

func (x *GetCookbookResponse) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *GetCookbookResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetCookbookResponse) GetImageAddress() string {
	if x != nil {
		return x.ImageAddress
	}
	return ""
}

func (x *GetCookbookResponse) GetIsMeat() bool {
	if x != nil {
		return x.IsMeat
	}
	return false
}

func (x *GetCookbookResponse) GetFeature() string {
	if x != nil {
		return x.Feature
	}
	return ""
}

func (x *GetCookbookResponse) GetCookingMethods() string {
	if x != nil {
		return x.CookingMethods
	}
	return ""
}

func (x *GetCookbookResponse) GetProcessDifficulty() float32 {
	if x != nil {
		return x.ProcessDifficulty
	}
	return 0
}

func (x *GetCookbookResponse) GetHealth() float32 {
	if x != nil {
		return x.Health
	}
	return 0
}

func (x *GetCookbookResponse) GetCuisineSid() string {
	if x != nil {
		return x.CuisineSid
	}
	return ""
}

func (x *GetCookbookResponse) GetCuisineName() string {
	if x != nil {
		return x.CuisineName
	}
	return ""
}

func (x *GetCookbookResponse) GetDtSid() string {
	if x != nil {
		return x.DtSid
	}
	return ""
}

func (x *GetCookbookResponse) GetDtName() string {
	if x != nil {
		return x.DtName
	}
	return ""
}

func (x *GetCookbookResponse) GetUserSid() string {
	if x != nil {
		return x.UserSid
	}
	return ""
}

func (x *GetCookbookResponse) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *GetCookbookResponse) GetCookbookIngredientList() []*GetCookbookResponse_GetCookbookIngredientResponse {
	if x != nil {
		return x.CookbookIngredientList
	}
	return nil
}

func (x *GetCookbookResponse) GetCookbookCookingList() []*GetCookbookResponse_GetCookbookCookingResponse {
	if x != nil {
		return x.CookbookCookingList
	}
	return nil
}

// 根据菜谱表的 name 批量获取菜谱列表的请求体
type CookbookListByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cookbook 表的 name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CookbookListByNameRequest) Reset() {
	*x = CookbookListByNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cookbook_cookbook_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CookbookListByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CookbookListByNameRequest) ProtoMessage() {}

func (x *CookbookListByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cookbook_cookbook_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CookbookListByNameRequest.ProtoReflect.Descriptor instead.
func (*CookbookListByNameRequest) Descriptor() ([]byte, []int) {
	return file_cookbook_cookbook_proto_rawDescGZIP(), []int{4}
}

func (x *CookbookListByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// 根据 cuisine 表的 sid 批量获取菜谱列表的请求体
type CookbookListByCuisineSidRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cuisine表的sid外键
	CuisineSid string `protobuf:"bytes,1,opt,name=cuisine_sid,json=cuisineSid,proto3" json:"cuisine_sid,omitempty"`
}

func (x *CookbookListByCuisineSidRequest) Reset() {
	*x = CookbookListByCuisineSidRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cookbook_cookbook_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CookbookListByCuisineSidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CookbookListByCuisineSidRequest) ProtoMessage() {}

func (x *CookbookListByCuisineSidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cookbook_cookbook_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CookbookListByCuisineSidRequest.ProtoReflect.Descriptor instead.
func (*CookbookListByCuisineSidRequest) Descriptor() ([]byte, []int) {
	return file_cookbook_cookbook_proto_rawDescGZIP(), []int{5}
}

func (x *CookbookListByCuisineSidRequest) GetCuisineSid() string {
	if x != nil {
		return x.CuisineSid
	}
	return ""
}

// 根据 dishes_type 表的 sid 批量获取菜谱列表的请求体
type CookbookListByDtSidRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// dishes_type表的sid外键
	DtSid string `protobuf:"bytes,1,opt,name=dt_sid,json=dtSid,proto3" json:"dt_sid,omitempty"`
}

func (x *CookbookListByDtSidRequest) Reset() {
	*x = CookbookListByDtSidRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cookbook_cookbook_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CookbookListByDtSidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CookbookListByDtSidRequest) ProtoMessage() {}

func (x *CookbookListByDtSidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cookbook_cookbook_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CookbookListByDtSidRequest.ProtoReflect.Descriptor instead.
func (*CookbookListByDtSidRequest) Descriptor() ([]byte, []int) {
	return file_cookbook_cookbook_proto_rawDescGZIP(), []int{6}
}

func (x *CookbookListByDtSidRequest) GetDtSid() string {
	if x != nil {
		return x.DtSid
	}
	return ""
}

// 根据 User 模块的 user 表的 sid 批量获取菜谱列表的请求体
type CookbookListByUserSidRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User模块的user表的sid外键
	UserSid string `protobuf:"bytes,1,opt,name=user_sid,json=userSid,proto3" json:"user_sid,omitempty"`
}

func (x *CookbookListByUserSidRequest) Reset() {
	*x = CookbookListByUserSidRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cookbook_cookbook_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CookbookListByUserSidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CookbookListByUserSidRequest) ProtoMessage() {}

func (x *CookbookListByUserSidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cookbook_cookbook_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CookbookListByUserSidRequest.ProtoReflect.Descriptor instead.
func (*CookbookListByUserSidRequest) Descriptor() ([]byte, []int) {
	return file_cookbook_cookbook_proto_rawDescGZIP(), []int{7}
}

func (x *CookbookListByUserSidRequest) GetUserSid() string {
	if x != nil {
		return x.UserSid
	}
	return ""
}

// 根据综合条件批量获取菜谱列表的请求体
type CookbookListByGeneralConditionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cookbook 表的 name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// 是否为荤菜
	IsMeat bool `protobuf:"varint,2,opt,name=is_meat,json=isMeat,proto3" json:"is_meat,omitempty"`
	// cuisine表的sid外键
	CuisineSid string `protobuf:"bytes,3,opt,name=cuisine_sid,json=cuisineSid,proto3" json:"cuisine_sid,omitempty"`
	// dishes_type表的sid外键
	DtSid string `protobuf:"bytes,4,opt,name=dt_sid,json=dtSid,proto3" json:"dt_sid,omitempty"`
	// User模块的user表的sid外键
	UserSid string `protobuf:"bytes,5,opt,name=user_sid,json=userSid,proto3" json:"user_sid,omitempty"`
	// 食材处理过程分值,加分越多处理越麻烦,加分越少处理越简单
	ProcessDifficultyMin float32 `protobuf:"fixed32,6,opt,name=process_difficulty_min,json=processDifficultyMin,proto3" json:"process_difficulty_min,omitempty"`
	// 食材处理过程分值,加分越多处理越麻烦,加分越少处理越简单
	ProcessDifficultyMax float32 `protobuf:"fixed32,7,opt,name=process_difficulty_max,json=processDifficultyMax,proto3" json:"process_difficulty_max,omitempty"`
	// 食材的清淡程度分值,加分越多越重口味,加分越少越清淡
	HealthMin float32 `protobuf:"fixed32,8,opt,name=health_min,json=healthMin,proto3" json:"health_min,omitempty"`
	// 食材的清淡程度分值,加分越多越重口味,加分越少越清淡
	HealthMax float32 `protobuf:"fixed32,9,opt,name=health_max,json=healthMax,proto3" json:"health_max,omitempty"`
	// 排序方式
	SortCriteria *CookbookListByGeneralConditionsRequest_SortCriteriaRequest `protobuf:"bytes,10,opt,name=sort_criteria,json=sortCriteria,proto3" json:"sort_criteria,omitempty"`
}

func (x *CookbookListByGeneralConditionsRequest) Reset() {
	*x = CookbookListByGeneralConditionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cookbook_cookbook_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CookbookListByGeneralConditionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CookbookListByGeneralConditionsRequest) ProtoMessage() {}

func (x *CookbookListByGeneralConditionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cookbook_cookbook_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CookbookListByGeneralConditionsRequest.ProtoReflect.Descriptor instead.
func (*CookbookListByGeneralConditionsRequest) Descriptor() ([]byte, []int) {
	return file_cookbook_cookbook_proto_rawDescGZIP(), []int{8}
}

func (x *CookbookListByGeneralConditionsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CookbookListByGeneralConditionsRequest) GetIsMeat() bool {
	if x != nil {
		return x.IsMeat
	}
	return false
}

func (x *CookbookListByGeneralConditionsRequest) GetCuisineSid() string {
	if x != nil {
		return x.CuisineSid
	}
	return ""
}

func (x *CookbookListByGeneralConditionsRequest) GetDtSid() string {
	if x != nil {
		return x.DtSid
	}
	return ""
}

func (x *CookbookListByGeneralConditionsRequest) GetUserSid() string {
	if x != nil {
		return x.UserSid
	}
	return ""
}

func (x *CookbookListByGeneralConditionsRequest) GetProcessDifficultyMin() float32 {
	if x != nil {
		return x.ProcessDifficultyMin
	}
	return 0
}

func (x *CookbookListByGeneralConditionsRequest) GetProcessDifficultyMax() float32 {
	if x != nil {
		return x.ProcessDifficultyMax
	}
	return 0
}

func (x *CookbookListByGeneralConditionsRequest) GetHealthMin() float32 {
	if x != nil {
		return x.HealthMin
	}
	return 0
}

func (x *CookbookListByGeneralConditionsRequest) GetHealthMax() float32 {
	if x != nil {
		return x.HealthMax
	}
	return 0
}

func (x *CookbookListByGeneralConditionsRequest) GetSortCriteria() *CookbookListByGeneralConditionsRequest_SortCriteriaRequest {
	if x != nil {
		return x.SortCriteria
	}
	return nil
}

// 菜谱列表
type CookbookList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 菜谱表唯一键
	Sid string `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	// 菜名
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 菜谱图片地址
	ImageAddress string `protobuf:"bytes,3,opt,name=image_address,json=imageAddress,proto3" json:"image_address,omitempty"`
	// 是否为荤菜
	IsMeat bool `protobuf:"varint,4,opt,name=is_meat,json=isMeat,proto3" json:"is_meat,omitempty"`
	// 食材处理过程分值,加分越多处理越麻烦,加分越少处理越简单
	ProcessDifficulty float32 `protobuf:"fixed32,5,opt,name=process_difficulty,json=processDifficulty,proto3" json:"process_difficulty,omitempty"`
	// 食材的清淡程度分值,加分越多越重口味,加分越少越清淡
	Health float32 `protobuf:"fixed32,6,opt,name=health,proto3" json:"health,omitempty"`
	// cuisine表的name
	CuisineName string `protobuf:"bytes,7,opt,name=cuisine_name,json=cuisineName,proto3" json:"cuisine_name,omitempty"`
	// dishes_type表的name
	DtName string `protobuf:"bytes,8,opt,name=dt_name,json=dtName,proto3" json:"dt_name,omitempty"`
}

func (x *CookbookList) Reset() {
	*x = CookbookList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cookbook_cookbook_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CookbookList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CookbookList) ProtoMessage() {}

func (x *CookbookList) ProtoReflect() protoreflect.Message {
	mi := &file_cookbook_cookbook_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CookbookList.ProtoReflect.Descriptor instead.
func (*CookbookList) Descriptor() ([]byte, []int) {
	return file_cookbook_cookbook_proto_rawDescGZIP(), []int{9}
}

func (x *CookbookList) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *CookbookList) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CookbookList) GetImageAddress() string {
	if x != nil {
		return x.ImageAddress
	}
	return ""
}

func (x *CookbookList) GetIsMeat() bool {
	if x != nil {
		return x.IsMeat
	}
	return false
}

func (x *CookbookList) GetProcessDifficulty() float32 {
	if x != nil {
		return x.ProcessDifficulty
	}
	return 0
}

func (x *CookbookList) GetHealth() float32 {
	if x != nil {
		return x.Health
	}
	return 0
}

func (x *CookbookList) GetCuisineName() string {
	if x != nil {
		return x.CuisineName
	}
	return ""
}

func (x *CookbookList) GetDtName() string {
	if x != nil {
		return x.DtName
	}
	return ""
}

// 批量获取菜谱列表的响应体
type FindCookbookListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 可重复字段，以此到达 List 的效果，菜谱列表
	CookbookList []*CookbookList `protobuf:"bytes,1,rep,name=cookbook_list,json=cookbookList,proto3" json:"cookbook_list,omitempty"`
}

func (x *FindCookbookListResponse) Reset() {
	*x = FindCookbookListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cookbook_cookbook_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindCookbookListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindCookbookListResponse) ProtoMessage() {}

func (x *FindCookbookListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cookbook_cookbook_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindCookbookListResponse.ProtoReflect.Descriptor instead.
func (*FindCookbookListResponse) Descriptor() ([]byte, []int) {
	return file_cookbook_cookbook_proto_rawDescGZIP(), []int{10}
}

func (x *FindCookbookListResponse) GetCookbookList() []*CookbookList {
	if x != nil {
		return x.CookbookList
	}
	return nil
}

// 食材的请求体
type CookbookRequest_CookbookIngredientRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 菜谱和食材对照表唯一键
	Sid string `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	// 食材用量
	Quantity string `protobuf:"bytes,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// 食材类型：ingredient 表的 sid 外键
	ISid string `protobuf:"bytes,3,opt,name=i_sid,json=iSid,proto3" json:"i_sid,omitempty"`
}

func (x *CookbookRequest_CookbookIngredientRequest) Reset() {
	*x = CookbookRequest_CookbookIngredientRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cookbook_cookbook_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CookbookRequest_CookbookIngredientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CookbookRequest_CookbookIngredientRequest) ProtoMessage() {}

func (x *CookbookRequest_CookbookIngredientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cookbook_cookbook_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CookbookRequest_CookbookIngredientRequest.ProtoReflect.Descriptor instead.
func (*CookbookRequest_CookbookIngredientRequest) Descriptor() ([]byte, []int) {
	return file_cookbook_cookbook_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CookbookRequest_CookbookIngredientRequest) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *CookbookRequest_CookbookIngredientRequest) GetQuantity() string {
	if x != nil {
		return x.Quantity
	}
	return ""
}

func (x *CookbookRequest_CookbookIngredientRequest) GetISid() string {
	if x != nil {
		return x.ISid
	}
	return ""
}

// 菜谱制作步骤的请求体
type CookbookRequest_CookbookCookingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 菜品详情和操作流程对应表唯一键
	Sid string `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	// 菜谱图片地址
	ImageAddress string `protobuf:"bytes,2,opt,name=image_address,json=imageAddress,proto3" json:"image_address,omitempty"`
	// 食材处理描述
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// 制作步骤的类型：cooking_health 表的 sid 外键
	ChSid string `protobuf:"bytes,4,opt,name=ch_sid,json=chSid,proto3" json:"ch_sid,omitempty"`
}

func (x *CookbookRequest_CookbookCookingRequest) Reset() {
	*x = CookbookRequest_CookbookCookingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cookbook_cookbook_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CookbookRequest_CookbookCookingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CookbookRequest_CookbookCookingRequest) ProtoMessage() {}

func (x *CookbookRequest_CookbookCookingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cookbook_cookbook_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CookbookRequest_CookbookCookingRequest.ProtoReflect.Descriptor instead.
func (*CookbookRequest_CookbookCookingRequest) Descriptor() ([]byte, []int) {
	return file_cookbook_cookbook_proto_rawDescGZIP(), []int{0, 1}
}

func (x *CookbookRequest_CookbookCookingRequest) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *CookbookRequest_CookbookCookingRequest) GetImageAddress() string {
	if x != nil {
		return x.ImageAddress
	}
	return ""
}

func (x *CookbookRequest_CookbookCookingRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CookbookRequest_CookbookCookingRequest) GetChSid() string {
	if x != nil {
		return x.ChSid
	}
	return ""
}

// 获取食材的响应体
type GetCookbookResponse_GetCookbookIngredientResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 菜谱和食材对照表唯一键
	Sid string `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	// 食材用量
	Quantity string `protobuf:"bytes,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// 食材类型：ingredient 表的 sid 外键
	ISid string `protobuf:"bytes,3,opt,name=i_sid,json=iSid,proto3" json:"i_sid,omitempty"`
	// 食材类型：ingredient 表的 name
	IName string `protobuf:"bytes,4,opt,name=i_name,json=iName,proto3" json:"i_name,omitempty"`
}

func (x *GetCookbookResponse_GetCookbookIngredientResponse) Reset() {
	*x = GetCookbookResponse_GetCookbookIngredientResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cookbook_cookbook_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCookbookResponse_GetCookbookIngredientResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCookbookResponse_GetCookbookIngredientResponse) ProtoMessage() {}

func (x *GetCookbookResponse_GetCookbookIngredientResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cookbook_cookbook_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCookbookResponse_GetCookbookIngredientResponse.ProtoReflect.Descriptor instead.
func (*GetCookbookResponse_GetCookbookIngredientResponse) Descriptor() ([]byte, []int) {
	return file_cookbook_cookbook_proto_rawDescGZIP(), []int{3, 0}
}

func (x *GetCookbookResponse_GetCookbookIngredientResponse) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *GetCookbookResponse_GetCookbookIngredientResponse) GetQuantity() string {
	if x != nil {
		return x.Quantity
	}
	return ""
}

func (x *GetCookbookResponse_GetCookbookIngredientResponse) GetISid() string {
	if x != nil {
		return x.ISid
	}
	return ""
}

func (x *GetCookbookResponse_GetCookbookIngredientResponse) GetIName() string {
	if x != nil {
		return x.IName
	}
	return ""
}

// 获取菜谱制作步骤的响应体
type GetCookbookResponse_GetCookbookCookingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 菜品详情和操作流程对应表唯一键
	Sid string `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	// 菜谱图片地址
	ImageAddress string `protobuf:"bytes,2,opt,name=image_address,json=imageAddress,proto3" json:"image_address,omitempty"`
	// 食材处理描述
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// 制作步骤的类型：cooking_health 表的 sid 外键
	ChSid string `protobuf:"bytes,4,opt,name=ch_sid,json=chSid,proto3" json:"ch_sid,omitempty"`
	// 制作步骤的类型：cooking_health 表的 name
	ChName string `protobuf:"bytes,5,opt,name=ch_name,json=chName,proto3" json:"ch_name,omitempty"`
}

func (x *GetCookbookResponse_GetCookbookCookingResponse) Reset() {
	*x = GetCookbookResponse_GetCookbookCookingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cookbook_cookbook_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCookbookResponse_GetCookbookCookingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCookbookResponse_GetCookbookCookingResponse) ProtoMessage() {}

func (x *GetCookbookResponse_GetCookbookCookingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cookbook_cookbook_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCookbookResponse_GetCookbookCookingResponse.ProtoReflect.Descriptor instead.
func (*GetCookbookResponse_GetCookbookCookingResponse) Descriptor() ([]byte, []int) {
	return file_cookbook_cookbook_proto_rawDescGZIP(), []int{3, 1}
}

func (x *GetCookbookResponse_GetCookbookCookingResponse) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *GetCookbookResponse_GetCookbookCookingResponse) GetImageAddress() string {
	if x != nil {
		return x.ImageAddress
	}
	return ""
}

func (x *GetCookbookResponse_GetCookbookCookingResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GetCookbookResponse_GetCookbookCookingResponse) GetChSid() string {
	if x != nil {
		return x.ChSid
	}
	return ""
}

func (x *GetCookbookResponse_GetCookbookCookingResponse) GetChName() string {
	if x != nil {
		return x.ChName
	}
	return ""
}

// 排序条件请求体
type CookbookListByGeneralConditionsRequest_SortCriteriaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 进行排序依据的字段
	SortField string `protobuf:"bytes,1,opt,name=sort_field,json=sortField,proto3" json:"sort_field,omitempty"`
	// 是否升序排列
	IsAsc bool `protobuf:"varint,2,opt,name=is_asc,json=isAsc,proto3" json:"is_asc,omitempty"`
}

func (x *CookbookListByGeneralConditionsRequest_SortCriteriaRequest) Reset() {
	*x = CookbookListByGeneralConditionsRequest_SortCriteriaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cookbook_cookbook_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CookbookListByGeneralConditionsRequest_SortCriteriaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CookbookListByGeneralConditionsRequest_SortCriteriaRequest) ProtoMessage() {}

func (x *CookbookListByGeneralConditionsRequest_SortCriteriaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cookbook_cookbook_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CookbookListByGeneralConditionsRequest_SortCriteriaRequest.ProtoReflect.Descriptor instead.
func (*CookbookListByGeneralConditionsRequest_SortCriteriaRequest) Descriptor() ([]byte, []int) {
	return file_cookbook_cookbook_proto_rawDescGZIP(), []int{8, 0}
}

func (x *CookbookListByGeneralConditionsRequest_SortCriteriaRequest) GetSortField() string {
	if x != nil {
		return x.SortField
	}
	return ""
}

func (x *CookbookListByGeneralConditionsRequest_SortCriteriaRequest) GetIsAsc() bool {
	if x != nil {
		return x.IsAsc
	}
	return false
}

var File_cookbook_cookbook_proto protoreflect.FileDescriptor

var file_cookbook_cookbook_proto_rawDesc = []byte{
	0x0a, 0x17, 0x63, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x2f, 0x63, 0x6f, 0x6f, 0x6b, 0x62,
	0x6f, 0x6f, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x35, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xa4, 0x05, 0x0a, 0x0f, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6d, 0x65, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x69, 0x73, 0x4d, 0x65, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x75, 0x69, 0x73, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x75, 0x69, 0x73, 0x69, 0x6e, 0x65, 0x53, 0x69, 0x64, 0x12, 0x15, 0x0a,
	0x06, 0x64, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64,
	0x74, 0x53, 0x69, 0x64, 0x12, 0x67, 0x0a, 0x18, 0x63, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b,
	0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6f, 0x6b,
	0x62, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6f, 0x6b,
	0x62, 0x6f, 0x6f, 0x6b, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x16, 0x63, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5e, 0x0a,
	0x15, 0x63, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x13, 0x63, 0x6f, 0x6f, 0x6b, 0x62, 0x6f,
	0x6f, 0x6b, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x5e, 0x0a,
	0x19, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x53, 0x69, 0x64, 0x1a, 0x88, 0x01,
	0x0a, 0x16, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x63, 0x68, 0x53, 0x69, 0x64, 0x22, 0x28, 0x0a, 0x14, 0x43, 0x6f, 0x6f, 0x6b,
	0x62, 0x6f, 0x6f, 0x6b, 0x42, 0x79, 0x53, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73,
	0x69, 0x64, 0x22, 0x2b, 0x0a, 0x0f, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x22,
	0xab, 0x07, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6d, 0x65, 0x61, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4d, 0x65, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x2d,
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63,
	0x75, 0x6c, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x69, 0x73, 0x69, 0x6e, 0x65,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x69, 0x73,
	0x69, 0x6e, 0x65, 0x53, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x69, 0x73, 0x69, 0x6e,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x75,
	0x69, 0x73, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x74, 0x5f,
	0x73, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x74, 0x53, 0x69, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x64, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x53, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x6f, 0x0a, 0x18, 0x63, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x69, 0x6e,
	0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6f, 0x6b,
	0x62, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x16, 0x63, 0x6f, 0x6f, 0x6b,
	0x62, 0x6f, 0x6f, 0x6b, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x66, 0x0a, 0x15, 0x63, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x63,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x10, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f,
	0x6f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x13, 0x63, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x43,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x79, 0x0a, 0x1d, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x53, 0x69, 0x64, 0x12, 0x15,
	0x0a, 0x06, 0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x69, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xa5, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6f,
	0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a,
	0x06, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63,
	0x68, 0x53, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2f, 0x0a,
	0x19, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x42,
	0x0a, 0x1f, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79,
	0x43, 0x75, 0x69, 0x73, 0x69, 0x6e, 0x65, 0x53, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x69, 0x73, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x69, 0x73, 0x69, 0x6e, 0x65, 0x53,
	0x69, 0x64, 0x22, 0x33, 0x0a, 0x1a, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x79, 0x44, 0x74, 0x53, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x15, 0x0a, 0x06, 0x64, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x64, 0x74, 0x53, 0x69, 0x64, 0x22, 0x39, 0x0a, 0x1c, 0x43, 0x6f, 0x6f, 0x6b, 0x62,
	0x6f, 0x6f, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x53, 0x69, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x53,
	0x69, 0x64, 0x22, 0x84, 0x04, 0x0a, 0x26, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x79, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6d, 0x65, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4d, 0x65, 0x61, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75,
	0x69, 0x73, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x75, 0x69, 0x73, 0x69, 0x6e, 0x65, 0x53, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x64,
	0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x74, 0x53,
	0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x53, 0x69, 0x64, 0x12, 0x34, 0x0a,
	0x16, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75,
	0x6c, 0x74, 0x79, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79,
	0x4d, 0x69, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x64,
	0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x69, 0x66, 0x66,
	0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x4d, 0x61, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x4d, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x4d, 0x61, 0x78, 0x12, 0x63, 0x0a, 0x0d, 0x73, 0x6f, 0x72, 0x74, 0x5f,
	0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e,
	0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x79, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x43,
	0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c,
	0x73, 0x6f, 0x72, 0x74, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x1a, 0x4b, 0x0a, 0x13,
	0x53, 0x6f, 0x72, 0x74, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x61, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x41, 0x73, 0x63, 0x22, 0xf5, 0x01, 0x0a, 0x0c, 0x43, 0x6f,
	0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6d, 0x65, 0x61, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4d, 0x65, 0x61, 0x74, 0x12, 0x2d,
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63,
	0x75, 0x6c, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x69, 0x73, 0x69, 0x6e, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x75, 0x69,
	0x73, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x51, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f,
	0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a,
	0x0d, 0x63, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f,
	0x6f, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0c, 0x63, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b,
	0x4c, 0x69, 0x73, 0x74, 0x32, 0xf8, 0x07, 0x0a, 0x08, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f,
	0x6b, 0x12, 0x50, 0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6f, 0x6b, 0x62,
	0x6f, 0x6f, 0x6b, 0x12, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x14, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x3a, 0x01, 0x2a, 0x22, 0x09, 0x2f, 0x43, 0x6f, 0x6f, 0x6b, 0x62,
	0x6f, 0x6f, 0x6b, 0x12, 0x58, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6f,
	0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x12, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6f, 0x6b, 0x62,
	0x6f, 0x6f, 0x6b, 0x42, 0x79, 0x53, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x13, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x2a, 0x0f, 0x2f, 0x43,
	0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x2f, 0x7b, 0x73, 0x69, 0x64, 0x7d, 0x12, 0x50, 0x0a,
	0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x12,
	0x13, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x0e, 0x3a, 0x01, 0x2a, 0x1a, 0x09, 0x2f, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x12,
	0x5e, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x42, 0x79,
	0x53, 0x69, 0x64, 0x12, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f,
	0x6b, 0x42, 0x79, 0x53, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f,
	0x2f, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x2f, 0x7b, 0x73, 0x69, 0x64, 0x7d, 0x12,
	0x79, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a,
	0x2f, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x92, 0x01, 0x0a, 0x1c, 0x46,
	0x69, 0x6e, 0x64, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x79, 0x43, 0x75, 0x69, 0x73, 0x69, 0x6e, 0x65, 0x53, 0x69, 0x64, 0x12, 0x23, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x43,
	0x75, 0x69, 0x73, 0x69, 0x6e, 0x65, 0x53, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f,
	0x6f, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f,
	0x6b, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x43, 0x75, 0x69, 0x73, 0x69, 0x6e, 0x65, 0x53, 0x69,
	0x64, 0x2f, 0x7b, 0x63, 0x75, 0x69, 0x73, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x7d, 0x12,
	0x7e, 0x0a, 0x17, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x79, 0x44, 0x74, 0x53, 0x69, 0x64, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x2e,
	0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x44, 0x74,
	0x53, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f,
	0x12, 0x1d, 0x2f, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x79, 0x44, 0x74, 0x53, 0x69, 0x64, 0x2f, 0x7b, 0x64, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x7d, 0x12,
	0x9c, 0x01, 0x0a, 0x23, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6f,
	0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x6f,
	0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f, 0x43,
	0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5f,
	0x0a, 0x10, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f,
	0x12, 0x0d, 0x2f, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x48, 0x65,
	0x61, 0x76, 0x65, 0x6e, 0x5a, 0x68, 0x69, 0x2f, 0x77, 0x68, 0x61, 0x74, 0x2d, 0x65, 0x61, 0x74,
	0x2f, 0x63, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cookbook_cookbook_proto_rawDescOnce sync.Once
	file_cookbook_cookbook_proto_rawDescData = file_cookbook_cookbook_proto_rawDesc
)

func file_cookbook_cookbook_proto_rawDescGZIP() []byte {
	file_cookbook_cookbook_proto_rawDescOnce.Do(func() {
		file_cookbook_cookbook_proto_rawDescData = protoimpl.X.CompressGZIP(file_cookbook_cookbook_proto_rawDescData)
	})
	return file_cookbook_cookbook_proto_rawDescData
}

var file_cookbook_cookbook_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_cookbook_cookbook_proto_goTypes = []interface{}{
	(*CookbookRequest)(nil),                                            // 0: pb.CookbookRequest
	(*CookbookBySidRequest)(nil),                                       // 1: pb.CookbookBySidRequest
	(*BooleanResponse)(nil),                                            // 2: pb.BooleanResponse
	(*GetCookbookResponse)(nil),                                        // 3: pb.GetCookbookResponse
	(*CookbookListByNameRequest)(nil),                                  // 4: pb.CookbookListByNameRequest
	(*CookbookListByCuisineSidRequest)(nil),                            // 5: pb.CookbookListByCuisineSidRequest
	(*CookbookListByDtSidRequest)(nil),                                 // 6: pb.CookbookListByDtSidRequest
	(*CookbookListByUserSidRequest)(nil),                               // 7: pb.CookbookListByUserSidRequest
	(*CookbookListByGeneralConditionsRequest)(nil),                     // 8: pb.CookbookListByGeneralConditionsRequest
	(*CookbookList)(nil),                                               // 9: pb.CookbookList
	(*FindCookbookListResponse)(nil),                                   // 10: pb.FindCookbookListResponse
	(*CookbookRequest_CookbookIngredientRequest)(nil),                  // 11: pb.CookbookRequest.CookbookIngredientRequest
	(*CookbookRequest_CookbookCookingRequest)(nil),                     // 12: pb.CookbookRequest.CookbookCookingRequest
	(*GetCookbookResponse_GetCookbookIngredientResponse)(nil),          // 13: pb.GetCookbookResponse.GetCookbookIngredientResponse
	(*GetCookbookResponse_GetCookbookCookingResponse)(nil),             // 14: pb.GetCookbookResponse.GetCookbookCookingResponse
	(*CookbookListByGeneralConditionsRequest_SortCriteriaRequest)(nil), // 15: pb.CookbookListByGeneralConditionsRequest.SortCriteriaRequest
	(*emptypb.Empty)(nil),                                              // 16: google.protobuf.Empty
}
var file_cookbook_cookbook_proto_depIdxs = []int32{
	11, // 0: pb.CookbookRequest.cookbook_ingredient_list:type_name -> pb.CookbookRequest.CookbookIngredientRequest
	12, // 1: pb.CookbookRequest.cookbook_cooking_list:type_name -> pb.CookbookRequest.CookbookCookingRequest
	13, // 2: pb.GetCookbookResponse.cookbook_ingredient_list:type_name -> pb.GetCookbookResponse.GetCookbookIngredientResponse
	14, // 3: pb.GetCookbookResponse.cookbook_cooking_list:type_name -> pb.GetCookbookResponse.GetCookbookCookingResponse
	15, // 4: pb.CookbookListByGeneralConditionsRequest.sort_criteria:type_name -> pb.CookbookListByGeneralConditionsRequest.SortCriteriaRequest
	9,  // 5: pb.FindCookbookListResponse.cookbook_list:type_name -> pb.CookbookList
	0,  // 6: pb.Cookbook.InsertCookbook:input_type -> pb.CookbookRequest
	1,  // 7: pb.Cookbook.DeleteCookbook:input_type -> pb.CookbookBySidRequest
	0,  // 8: pb.Cookbook.UpdateCookbook:input_type -> pb.CookbookRequest
	1,  // 9: pb.Cookbook.GetCookbookBySid:input_type -> pb.CookbookBySidRequest
	4,  // 10: pb.Cookbook.FindCookbookListByName:input_type -> pb.CookbookListByNameRequest
	5,  // 11: pb.Cookbook.FindCookbookListByCuisineSid:input_type -> pb.CookbookListByCuisineSidRequest
	6,  // 12: pb.Cookbook.FindCookbookListByDtSid:input_type -> pb.CookbookListByDtSidRequest
	8,  // 13: pb.Cookbook.FindCookbookListByGeneralConditions:input_type -> pb.CookbookListByGeneralConditionsRequest
	16, // 14: pb.Cookbook.FindCookbookList:input_type -> google.protobuf.Empty
	2,  // 15: pb.Cookbook.InsertCookbook:output_type -> pb.BooleanResponse
	2,  // 16: pb.Cookbook.DeleteCookbook:output_type -> pb.BooleanResponse
	2,  // 17: pb.Cookbook.UpdateCookbook:output_type -> pb.BooleanResponse
	3,  // 18: pb.Cookbook.GetCookbookBySid:output_type -> pb.GetCookbookResponse
	10, // 19: pb.Cookbook.FindCookbookListByName:output_type -> pb.FindCookbookListResponse
	10, // 20: pb.Cookbook.FindCookbookListByCuisineSid:output_type -> pb.FindCookbookListResponse
	10, // 21: pb.Cookbook.FindCookbookListByDtSid:output_type -> pb.FindCookbookListResponse
	10, // 22: pb.Cookbook.FindCookbookListByGeneralConditions:output_type -> pb.FindCookbookListResponse
	10, // 23: pb.Cookbook.FindCookbookList:output_type -> pb.FindCookbookListResponse
	15, // [15:24] is the sub-list for method output_type
	6,  // [6:15] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_cookbook_cookbook_proto_init() }
func file_cookbook_cookbook_proto_init() {
	if File_cookbook_cookbook_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cookbook_cookbook_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CookbookRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cookbook_cookbook_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CookbookBySidRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cookbook_cookbook_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BooleanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cookbook_cookbook_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCookbookResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cookbook_cookbook_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CookbookListByNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cookbook_cookbook_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CookbookListByCuisineSidRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cookbook_cookbook_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CookbookListByDtSidRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cookbook_cookbook_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CookbookListByUserSidRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cookbook_cookbook_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CookbookListByGeneralConditionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cookbook_cookbook_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CookbookList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cookbook_cookbook_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindCookbookListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cookbook_cookbook_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CookbookRequest_CookbookIngredientRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cookbook_cookbook_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CookbookRequest_CookbookCookingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cookbook_cookbook_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCookbookResponse_GetCookbookIngredientResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cookbook_cookbook_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCookbookResponse_GetCookbookCookingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cookbook_cookbook_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CookbookListByGeneralConditionsRequest_SortCriteriaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cookbook_cookbook_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cookbook_cookbook_proto_goTypes,
		DependencyIndexes: file_cookbook_cookbook_proto_depIdxs,
		MessageInfos:      file_cookbook_cookbook_proto_msgTypes,
	}.Build()
	File_cookbook_cookbook_proto = out.File
	file_cookbook_cookbook_proto_rawDesc = nil
	file_cookbook_cookbook_proto_goTypes = nil
	file_cookbook_cookbook_proto_depIdxs = nil
}
